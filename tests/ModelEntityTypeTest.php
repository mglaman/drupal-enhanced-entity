<?php

declare(strict_types=1);

namespace EntityEnhancements\Tests;

use Drupal\Core\DependencyInjection\ContainerBuilder;
use Drupal\Core\Entity\EntityAccessControlHandler as CoreEntityAccessControlHandler;
use Drupal\Core\Language\Language;
use Drupal\Core\Language\LanguageDefault;
use Drupal\Core\StringTranslation\TranslationManager;
use Drupal\Core\StringTranslation\Translator\StaticTranslation;
use Drupal\entity\EntityAccessControlHandler;
use Drupal\entity\EntityPermissionProvider;
use Drupal\entity\QueryAccess\QueryAccessHandler;
use Drupal\entity\QueryAccess\UncacheableQueryAccessHandler;
use Drupal\entity\UncacheableEntityAccessControlHandler;
use Drupal\entity\UncacheableEntityPermissionProvider;
use Drupal\entity_test\Entity\EntityTest;
use EntityEnhancements\Entity\ModelEntityType;
use PHPUnit\Framework\TestCase;

final class ModelEntityTypeTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp();
        $container = new ContainerBuilder();
        $stringTranslation = new TranslationManager(
            new LanguageDefault(Language::$defaultValues)
        );
        $stringTranslation->addTranslator(new StaticTranslation());
        $container->set('string_translation', $stringTranslation);
        \Drupal::setContainer($container);
    }

    /**
     * @param array<int, string> $countLabels
     *
     * @dataProvider labelData
     */
    public function testLabel(
        string $definedLabel,
        string $label,
        string $singularLabel,
        string $pluralLabel,
        array $countLabels,
        string $collectionLabel,
    ): void {
        $sut = new ModelEntityType([
            'id' => 'foo_bar',
            'label' => $definedLabel,
            'class' => '\Drupal\mymodule\Entity\FooBar',
        ]);
        self::assertEquals($label, (string) $sut->getLabel());
        self::assertEquals($singularLabel, (string) $sut->getSingularLabel());
        self::assertEquals($pluralLabel, (string) $sut->getPluralLabel());
        foreach ($countLabels as $count => $countLabel) {
            self::assertEquals($countLabel, (string) $sut->getCountLabel($count));
        }
        self::assertEquals($collectionLabel, (string) $sut->getCollectionLabel());
    }

    /**
     * @return array<string, mixed>
     */
    public static function labelData(): array
    {
        return [
            'product' => [
                'Product',
                'Product',
                'product',
                'products',
                [
                    0 => '0 products',
                    1 => '1 product',
                    5 => '5 products',
                ],
                'Products',
            ],
            'autogenerated \Drupal\mymodule\Entity\FooBar' => [
                '',
                'Foo Bar',
                'foo bar',
                'foo bars',
                [
                    0 => '0 foo bars',
                    1 => '1 foo bar',
                    5 => '5 foo bars',
                ],
                'Foo bars',
            ],
        ];
    }

    /**
     * @param array<string, string> $expected
     *
     * @dataProvider entityKeysData
     */
    public function testEntityKeys(string $id, string $class, array $expected): void
    {
        $sut = new ModelEntityType([
            'id' => $id,
            'label' => 'Foo bar',
            'class' => $class,
        ]);
        self::assertEquals($expected, $sut->getKeys());
    }

    /**
     * @return array<string, mixed>
     */
    public static function entityKeysData(): array
    {
        return [
            // @todo test without EntityOwnerInterface
            'entity with owner' => [
                'foo_bar',
                EntityTest::class,
                [
                    'revision' => '',
                    'bundle' => '',
                    'langcode' => '',
                    'default_langcode' => 'default_langcode',
                    'revision_translation_affected' => 'revision_translation_affected',
                    'id' => 'foo_bar_id',
                    'uuid' => 'uuid',
                    'label' => 'name',
                    'owner' => 'uid',
                ],
            ]
        ];
    }

    public function testEnhancedEntityAccess(): void
    {
        $sut = new ModelEntityType([
            'id' => 'foo_bar',
            'label' => 'Foo bar',
            'class' => EntityTest::class,
        ]);
        self::assertEquals(CoreEntityAccessControlHandler::class, $sut->getHandlerClass('access'));
        self::assertEquals('', $sut->getHandlerClass('query_access'));
        self::assertEquals('', $sut->getHandlerClass('permission_provider'));

        $sut = new ModelEntityType([
            'id' => 'foo_bar',
            'label' => 'Foo bar',
            'class' => EntityTest::class,
            'enhanced_entity_access' => true,
        ]);
        self::assertEquals(EntityAccessControlHandler::class, $sut->getHandlerClass('access'));
        self::assertEquals(QueryAccessHandler::class, $sut->getHandlerClass('query_access'));
        self::assertEquals(EntityPermissionProvider::class, $sut->getHandlerClass('permission_provider'));
    }

    public function testEntityOwnerAccess(): void
    {
        $sut = new ModelEntityType([
            'id' => 'foo_bar',
            'label' => 'Foo bar',
            'class' => EntityTest::class,
            'owner_entity_access' => true,
        ]);
        self::assertEquals(UncacheableEntityAccessControlHandler::class, $sut->getHandlerClass('access'));
        self::assertEquals(UncacheableQueryAccessHandler::class, $sut->getHandlerClass('query_access'));
        self::assertEquals(UncacheableEntityPermissionProvider::class, $sut->getHandlerClass('permission_provider'));
    }
}
